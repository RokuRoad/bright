import { mapValues } from "lodash";
import * as TOKENS from "./Tokens";

const IGNORED_TOKENS = mapValues(TOKENS, () => []);

const visitorKeys = {
  ...IGNORED_TOKENS,
  AdditionExpression: ["left", "right", "operator", "trailingComments"],
  Arguments: ["param"],
  ArrayElement: ["value", "trailingComments"],
  ArrayExpression: ["elements", "trailingComments"],
  AssignmentExpression: ["left", "right", "operator"],
  BlockStatement: ["body"],
  CallExpression: ["args", "callee"],
  Comment: [],
  ConditionalConst: ["operator", "left", "right"],
  ConditionalElseIfStatement: ["alternate", "body", "test"],
  ConditionalElseStatement: ["body"],
  ConditionalError: ["error"],
  ConditionalIfStatement: ["alternate", "body", "test", "trailingComments"],
  DimStatement: ["id", "ArrayExpression"],
  DotMemberExpression: ["operator", "right"],
  ElseIfStatement: ["test", "body", "trailingComments"],
  ElseStatement: ["body", "trailingComments"],
  EmptyStatement: ["trailingComments"],
  ForEachStatement: ["countExpression", "counter", "body", "trailingComments"],
  ForStatement: ["init", "test", "update", "body", "trailingComments"],
  FunctionDeclaration: [
    "id",
    "ReturnType",
    "params",
    "body",
    "trailingComments",
  ],
  FunctionExpression: ["body", "params", "ReturnType", "trailingComments"],
  GoToStatement: ["id"],
  Identifier: ["asType", "name"],
  IfStatement: ["test", "consequent", "alternate", "trailingComments"],
  LibraryStatement: ["path"],
  Literal: ["raw", "value"],
  LogicExpression: ["operator", "left", "right"],
  MemberExpression: ["computed", "object", "properties"],
  MultiplicationExpression: ["operator", "left", "right"],
  NextStatement: ["trailingComments"],
  ObjectExpression: ["properties", "trailingComments"],
  Parameter: ["name", "TypeAnnotation", "value"],
  ParameterList: ["args"],
  ParenthesisExpression: ["expression"],
  PostfixExpression: ["operator", "argument"],
  PrintStatement: ["value", "trailingComments"],
  Program: ["body"],
  Property: ["key", "value"],
  RelationExpression: ["left", "right", "operator"],
  ReturnStatement: ["argument", "trailingComments"],
  StopStatement: ["trailingComments"],
  SubDeclaration: ["id", "params", "body", "ReturnType", "trailingComments"],
  SubExpression: ["body", "params", "trailingComments"],
  TypeAnnotation: [],
  UnTypedIdentifier: ["name"],
  UnaryExpression: ["operator", "argument"],
  WhileStatement: ["test", "body"],
  RokuTryStatement: ["body", "trailingComments", "exception", "onError"],
};

export { visitorKeys };
